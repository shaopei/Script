panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank())
ggplot(spc_melt,aes(x=TwinNum,y=value,fill=Family)) + geom_bar(stat="identity")+ ylab("")+facet_wrap(~TwinID,nrow=1)+ #scale_fill_brewer(palette="Set1") +
scale_fill_manual(values=cbbPalette) +
theme(legend.position="none")
}
family_plot <- function(spc_t){
spc_t$SampleID = row.names(spc_t)
spc_melt = melt(spc_t,id.vars=c("TwinID","SampleID","TwinNum"),variable.name="Family")
spc_melt$value = as.numeric(spc_melt$value)
spc_melt$TwinNum = as.factor(spc_melt$TwinNum)
theme_set(theme_bw())
theme_update(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank())
ggplot(spc_melt,aes(x=TwinNum,y=value,fill=Family)) + geom_bar(stat="identity")+ ylab("Relative abundance")+facet_wrap(~TwinID,nrow=1)+ #scale_fill_brewer(palette="Set1") +
scale_fill_manual(values=cbbPalette) +
theme(legend.position="none")
}
p1 = phylum_plot(m.phylum_reverse)
p2 =family_plot(v.family_reverse_label)
multiplot(p1, p2, cols=1)
?merge
d = c(1,2,3)
d
d+ 2
d+ c(2)
c(d,2)
d
require(bigWig)
?bed6.region.bpQuery.bigWig
?bed.region.bpQuery.bigWig
a=v(2,3,4)
a=c(2,3,4)
a
print(a)
?log
?hist
?pdf
strsplit
?strsplit
?hist
?curve
?dnorm
curve(log(pnorm(x)), add = TRUE, col = "red", lwd = 2)
curve(log(pnorm(x)), col = "red", lwd = 2)
x
curve(log(pnorm(xx)), col = "red", lwd = 2)
x
pnorm(xx)
pnorm(x)
pnorm(x)
pnorm(x)
pnorm(x)
a=pnorm(x)
?pnorm
dnorm(seq(-10,10,0.1), mean = 0, sd = 1, log = FALSE)
?dnorm
?hist
?abline
library("DESeq2")
library("DESeq2")
install.packages("DESeq2")
library("DESeq2")
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
source("https://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("DESeq2")
library("DESeq2")
?DESeqDataSetFromMatrix
?relevel
?DESeq
?result
??result
plot(0,0)
plot(0, 0, ylim=c(-11,11), xlim=c(1e-1, 2e5))
plot(0, 0, ylim=c(-11,11), xlim=c(1e-1, 2e5), log='x')
plot(1, 0, ylim=c(-11,11), xlim=c(1e-1, 2e5), log='x')
?head
lappy?
lapply?
?lapply
colnames
?colnames
? bed.region.bpQuery.bigWig
plot(1,1)
?abline
abline(0,1)
?plot
require(bigWig)
?bigWig
?bed6.region.bpQuery.bigWig
?step.bpQuery.bigWig
?which.max
?rowMin
require(bigWig)
?metaprofile.bigWig
q()
getwd()
setwd("/Users/shaopei/Box Sync/Danko_lab_work/Transcrition_directionality_project/fdr_Test/")
plus_counts.files = "counts_plus_bin.txt"
count_minus_beta =  "counts_minus_bin.txt"
get.mat_allele_count <- function(count){
mat_allele_count = apply(count, 1,function(x){
if(x['mat_all']=='T') return (as.numeric(x['cT']));
if(x['mat_all']=='C') return (as.numeric(x['cC']));
if(x['mat_all']=='G') return (as.numeric(x['cG']));
if(x['mat_all']=='A') return (as.numeric(x['cA']))
else return (NA)})
return (mat_allele_count)
}
get.pat_allele_count <- function(count){
pat_allele_count = apply(count, 1,function(x){
if(x['pat_all']=='T') return (as.numeric(x['cT']));
if(x['pat_all']=='C') return (as.numeric(x['cC']));
if(x['pat_all']=='G') return (as.numeric(x['cG']));
if(x['pat_all']=='A') return (as.numeric(x['cA']))
else return (NA)})
return (pat_allele_count)
}
count_plus_bin = read.table(plus_counts.files,header=T,sep = "\t")
count_minus_bin = read.table(minus_counts.files,header=T,sep = "\t")
count_plus_bin$strand='plus'
count_minus_bin$strand='minus'
count_SSCombined_bin = rbind.data.frame(count_plus_bin, count_minus_bin)
count_plus_bin = read.table(plus_counts.files,header=T,sep = "\t")
count_minus_bin = read.table(minus_counts.files,header=T,sep = "\t")
plus_counts.files = "counts_plus_bin.txt"
minus_counts.files =  "counts_minus_bin.txt"
count_plus_bin = read.table(plus_counts.files,header=T,sep = "\t")
count_minus_bin = read.table(minus_counts.files,header=T,sep = "\t")
count_plus_bin$strand='plus'
count_minus_bin$strand='minus'
count_SSCombined_bin = rbind.data.frame(count_plus_bin, count_minus_bin)
count_SSCombined_bin$mat_allele_count <- get.mat_allele_count(count_SSCombined_bin)
count_SSCombined_bin$pat_allele_count <- get.pat_allele_count(count_SSCombined_bin)
count_SSCombined_bin$total.reads.count <-count_SSCombined_bin$mat_allele_count + count_SSCombined_bin$pat_allele_count
count <- count_SSCombined_bin[count_SSCombined_bin$SymCls !='Weird', ]
library('VGAM')
fit_NoW.rho <- vglm(formula = cbind(count$pat_allele_count,count$mat_allele_count) ~ 1, family = "betabinomial")
fit_Sym.rho <- vglm(formula = cbind(count$pat_allele_count[count$SymCls =='Sym'],count$mat_allele_count[count$SymCls =='Sym']) ~ 1, family = "betabinomial")
folder = "/Users/shaopei/Box Sync/Danko_lab_work/Transcrition_directionality_project/fdr_Test"
setwd(folder)
getwd()
paste(folder,"betabinomial",sep='/')
Coef(fit_Sym.rho)
Coef(fit_Sym.rho)$rho
str(fit_Sym.rho)
summary(fit_Sym.rho)
Coef(fit_Sym.rho)
str(Coef(fit_Sym.rho))
Coef(fit_Sym.rho)[1]
Coef(fit_Sym.rho)[2]
x = Coef(fit_Sym.rho)[2]
x
str(x)
str(x)$num
str(x)
Coef(fit_Sym.rho)
x=Coef(fit_Sym.rho)
x
str(x)
x[2]
x[2]*2
Rho_Sym =Coef(fit_Sym.rho)[2]
fit_all.rho <- vglm(formula = cbind(count$pat_allele_count,count$mat_allele_count) ~ 1, family = "betabinomial")
Coef(fit_all.rho)
fit_Asym.rho <- vglm(formula = cbind(count$pat_allele_count[count$SymCls =='Asym'],count$mat_allele_count[count$SymCls =='Asym']) ~ 1, family = "betabinomial")
Coef(fit_Asym.rho)
hist(count$mat_allele_count/count$total.reads.count, breaks=seq(0,1,0.05), ylim=c(0,50000), col='red')
hist(count$mat_allele_count[count$SymPval.beta.SymModel>0.02]/count$total.reads.count[count$SymPval.beta.SymModel>0.02], breaks=seq(0,1,0.05), ylim=c(0,30000), col='dark grey', add=T)
hist(count$mat_allele_count/count$total.reads.count, breaks=seq(0,1,0.05), ylim=c(0,50000), col='red')
hist(count$mat_allele_count[count$SymPval.beta.SymModel>0.02]/count$total.reads.count[count$SymPval.beta.SymModel>0.02], breaks=seq(0,1,0.05), ylim=c(0,30000), col='dark grey', add=T)
empirical.reads.ratio.hist = hist(count$mat_allele_count/count$total.reads.count, breaks=seq(0,1,0.05), plot = F)
s1_all = 1.571751
s2_all = 1.579117
s1_Asym = 0.3774592
s2_Asym = 0.3816091
s1_Sym = 28.51298
s2_Sym = 28.54951
Rho_Sym = 0.01722301
count$expected.reads.count.all <- rbetabinom.ab(rep(1,length(count$total.reads.count)), count$total.reads.count, shape1 = s1_all, shape2 = s2_all)
expected.reads.ratio.hist <- hist(count$expected.reads.count.all/count$total.reads.count, breaks=seq(0,1,0.05), plot=F)
lines(expected.reads.ratio.hist$mids, expected.reads.ratio.hist$counts, type='o', col='dark green')
sum((empirical.reads.ratio.hist$counts - expected.reads.ratio.hist$counts)^2)
count$expected.reads.count.Asym <- count$expected.reads.count.all
count$expected.reads.count.Asym[count$SymCls =='Asym'] <-  rbetabinom.ab(rep(1,length(count$total.reads.count[count$SymCls =='Asym'])), count$total.reads.count[count$SymCls =='Asym'], shape1 = s1_Asym, shape2 = s2_Asym)
count$expected.reads.count.Asym[count$SymCls =='Sym'] <-  rbetabinom.ab(rep(1,length(count$total.reads.count[count$SymCls =='Sym'])), count$total.reads.count[count$SymCls =='Sym'], shape1 = s1_Sym, shape2 = s2_Sym)
expected.reads.ratio.hist <- hist(count$expected.reads.count.Asym/count$total.reads.count, breaks=seq(0,1,0.05), plot=F)
lines(expected.reads.ratio.hist$mids, expected.reads.ratio.hist$counts, type='o', col='dark red')
sum((empirical.reads.ratio.hist$counts - expected.reads.ratio.hist$counts)^2)
count$expected.reads.count.bin <-  rbetabinom(rep(1,length(count$total.reads.count)), count$total.reads.count, 0.5, rho = 0)
expected.reads.ratio.hist <- hist(count$expected.reads.count.bin/count$total.reads.count, breaks=seq(0,1,0.05), plot=F)
lines(expected.reads.ratio.hist$mids, expected.reads.ratio.hist$counts, type='o', col='black')
legend("topleft", legend = c('Binomial','Betabinomial(one model)','Betabinomial(two models)'), col=c('black','dark green','dark red'), pch=1) # optional legend
count$SymPval.beta.SymModel = betabinom.test.ab(count$mat_allele_count, count$total.reads.count, s1_Sym, s2_Sym)
betabinom.test.ab <- function(hap_count, total_count, shape1, shape2){
temp = pbetabinom.ab (hap_count, total_count, shape1,shape2)
temp = rowMins(cbind(1,temp))
temp_min = rowMins(cbind(temp, 1-temp))
return(2*temp_min)
}
hist(count$mat_allele_count[count$SymPval.beta.SymModel>0.02]/count$total.reads.count[count$SymPval.beta.SymModel>0.02], breaks=seq(0,1,0.05), ylim=c(0,30000), col='dark grey', add=T)
hist(count$mat_allele_count[count$SymPval.beta.SymModel.rho>0.05]/count$total.reads.count[count$SymPval.beta.SymModel.rho>0.05], breaks=seq(0,1,0.05), ylim=c(0,30000), col='dark grey', add=T)
hist(count$mat_allele_count/count$total.reads.count, breaks=seq(0,1,0.05), ylim=c(0,50000), col='grey')
empirical.reads.ratio.hist = hist(count$mat_allele_count/count$total.reads.count, breaks=seq(0,1,0.05), plot = F)
Rho_all = Coef(fit_all.rho)[2]
Rho_Asym = Coef(fit_Asym.rho)[2]
Rho_Sym = Coef(fit_Sym.rho)[2]
count$expected.reads.count.all <- rbetabinom(rep(1,length(count$total.reads.count)), count$total.reads.count, prob = 0.5,rho = Rho_all)
expected.reads.ratio.hist <- hist(count$expected.reads.count.all/count$total.reads.count, breaks=seq(0,1,0.05), plot=F)
lines(expected.reads.ratio.hist$mids, expected.reads.ratio.hist$counts, type='o', col='dark green')
count$expected.reads.count.Asym <- count$expected.reads.count.all
count$expected.reads.count.Asym[count$SymCls =='Asym'] <-  rbetabinom(rep(1,length(count$total.reads.count[count$SymCls =='Asym'])), count$total.reads.count[count$SymCls =='Asym'],  prob = 0.5,rho = Rho_Asym)
count$expected.reads.count.Asym[count$SymCls =='Asym'] <-  rbetabinom(rep(1,length(count$total.reads.count[count$SymCls =='Asym'])), count$total.reads.count[count$SymCls =='Asym'],prob = 0.5,rho = Rho_Asym)
count$expected.reads.count.Asym[count$SymCls =='Sym'] <-  rbetabinom(rep(1,length(count$total.reads.count[count$SymCls =='Sym'])), count$total.reads.count[count$SymCls =='Sym'],prob = 0.5,rho = Rho_Sym)
expected.reads.ratio.hist <- hist(count$expected.reads.count.Asym/count$total.reads.count, breaks=seq(0,1,0.05), plot=F)
lines(expected.reads.ratio.hist$mids, expected.reads.ratio.hist$counts, type='o', col='dark red')
sum((empirical.reads.ratio.hist$counts - expected.reads.ratio.hist$counts)^2)
sum((empirical.reads.ratio.hist$counts - expected.reads.ratio.hist$counts)^2)
expected.reads.ratio.hist <- hist(count$expected.reads.count.all/count$total.reads.count, breaks=seq(0,1,0.05), plot=F)
sum((empirical.reads.ratio.hist$counts - expected.reads.ratio.hist$counts)^2)
count$expected.reads.count.bin <-  rbetabinom(rep(1,length(count$total.reads.count)), count$total.reads.count, 0.5, rho = 0)
count$expected.reads.count.SymAsym <- count$expected.reads.count.all
count$expected.reads.count.SymAsym[count$SymCls =='Asym'] <-  rbetabinom(rep(1,length(count$total.reads.count[count$SymCls =='Asym'])), count$total.reads.count[count$SymCls =='Asym'],prob = 0.5,rho = Rho_Asym)
count$expected.reads.count.SymAsym[count$SymCls =='Sym'] <-  rbetabinom(rep(1,length(count$total.reads.count[count$SymCls =='Sym'])), count$total.reads.count[count$SymCls =='Sym'],prob = 0.5,rho = Rho_Sym)
expected.reads.ratio.hist <- hist(count$expected.reads.count.SymAsym/count$total.reads.count, breaks=seq(0,1,0.05), plot=F)
lines(expected.reads.ratio.hist$mids, expected.reads.ratio.hist$counts, type='o', col='dark red')
sum((empirical.reads.ratio.hist$counts - expected.reads.ratio.hist$counts)^2)
legend("topleft", legend = c('Binomial','Betabinomial(one model)','Betabinomial(two models)'), col=c('black','dark green','dark red'), pch=1) # optional legend
lines(expected.reads.ratio.hist$mids, expected.reads.ratio.hist$counts, type='o', col='black')
count$expected.reads.count.bin <-  rbetabinom(rep(1,length(count$total.reads.count)), count$total.reads.count, 0.5, rho = 0)
expected.reads.ratio.hist <- hist(count$expected.reads.count.bin/count$total.reads.count, breaks=seq(0,1,0.05), plot=F)
lines(expected.reads.ratio.hist$mids, expected.reads.ratio.hist$counts, type='o', col='black')
count$SymPval.beta.SymModel = betabinom.test.rho(count$mat_allele_count, count$total.reads.count, rho = Rho_Sym )
betabinom.test.rho <- function(hap_count, total_count, rho){
temp = pbetabinom (hap_count, total_count, 0.5, rho)
temp = rowMins(cbind(1,temp))
temp_min = rowMins(cbind(temp, 1-temp))
return(2*temp_min)
}
count$SymPval.beta.SymModel = betabinom.test.rho(count$mat_allele_count, count$total.reads.count, rho = Rho_Sym )
hist(count$mat_allele_count/count$total.reads.count, breaks=seq(0,1,0.05), ylim=c(0,50000), col='grey')
empirical.reads.ratio.hist = hist(count$mat_allele_count/count$total.reads.count, breaks=seq(0,1,0.05), plot = F)
count$expected.reads.count.all <- rbetabinom(rep(1,length(count$total.reads.count)), count$total.reads.count, prob = 0.5,rho = Rho_all)
expected.reads.ratio.hist <- hist(count$expected.reads.count.all/count$total.reads.count, breaks=seq(0,1,0.05), plot=F)
lines(expected.reads.ratio.hist$mids, expected.reads.ratio.hist$counts, type='o', col='dark green')
sum((empirical.reads.ratio.hist$counts - expected.reads.ratio.hist$counts)^2)
count$expected.reads.count.SymAsym <- count$expected.reads.count.all
count$expected.reads.count.SymAsym[count$SymCls =='Asym'] <-  rbetabinom(rep(1,length(count$total.reads.count[count$SymCls =='Asym'])), count$total.reads.count[count$SymCls =='Asym'],prob = 0.5,rho = Rho_Asym)
count$expected.reads.count.SymAsym[count$SymCls =='Sym'] <-  rbetabinom(rep(1,length(count$total.reads.count[count$SymCls =='Sym'])), count$total.reads.count[count$SymCls =='Sym'],prob = 0.5,rho = Rho_Sym)
expected.reads.ratio.hist <- hist(count$expected.reads.count.SymAsym/count$total.reads.count, breaks=seq(0,1,0.05), plot=F)
lines(expected.reads.ratio.hist$mids, expected.reads.ratio.hist$counts, type='o', col='dark red')
sum((empirical.reads.ratio.hist$counts - expected.reads.ratio.hist$counts)^2)
dir.create("betabinomial")
setwd(paste(folder,"betabinomial",sep='/'))
getwd()
Rho_all = Coef(fit_all.rho)[2]
Rho_Asym = Coef(fit_Asym.rho)[2]
Rho_Sym = Coef(fit_Sym.rho)[2]
pdf('counts_hist.pdf',width=17, height=9)
par(cex.axis=1.5, cex.lab=2, cex.main=2, mar=c(5,5,5,5))
hist(count$mat_allele_count/count$total.reads.count, breaks=seq(0,1,0.05), ylim=c(0,50000), col='grey')
empirical.reads.ratio.hist = hist(count$mat_allele_count/count$total.reads.count, breaks=seq(0,1,0.05), plot = F)
count$expected.reads.count.all <- rbetabinom(rep(1,length(count$total.reads.count)), count$total.reads.count, prob = 0.5,rho = Rho_all)
expected.reads.ratio.hist <- hist(count$expected.reads.count.all/count$total.reads.count, breaks=seq(0,1,0.05), plot=F)
lines(expected.reads.ratio.hist$mids, expected.reads.ratio.hist$counts, type='o', col='dark green')
sum((empirical.reads.ratio.hist$counts - expected.reads.ratio.hist$counts)^2)
count$expected.reads.count.SymAsym <- count$expected.reads.count.all
count$expected.reads.count.SymAsym[count$SymCls =='Asym'] <-  rbetabinom(rep(1,length(count$total.reads.count[count$SymCls =='Asym'])), count$total.reads.count[count$SymCls =='Asym'],prob = 0.5,rho = Rho_Asym)
count$expected.reads.count.SymAsym[count$SymCls =='Sym'] <-  rbetabinom(rep(1,length(count$total.reads.count[count$SymCls =='Sym'])), count$total.reads.count[count$SymCls =='Sym'],prob = 0.5,rho = Rho_Sym)
expected.reads.ratio.hist <- hist(count$expected.reads.count.SymAsym/count$total.reads.count, breaks=seq(0,1,0.05), plot=F)
lines(expected.reads.ratio.hist$mids, expected.reads.ratio.hist$counts, type='o', col='dark red')
sum((empirical.reads.ratio.hist$counts - expected.reads.ratio.hist$counts)^2)
count$expected.reads.count.bin <-  rbetabinom(rep(1,length(count$total.reads.count)), count$total.reads.count, 0.5, rho = 0)
count$expected.reads.count.bin <-  rbetabinom(rep(1,length(count$total.reads.count)), count$total.reads.count, 0.5, rho = 0)
expected.reads.ratio.hist <- hist(count$expected.reads.count.bin/count$total.reads.count, breaks=seq(0,1,0.05), plot=F)
lines(expected.reads.ratio.hist$mids, expected.reads.ratio.hist$counts, type='o', col='black')
legend("topleft", legend = c('Binomial','Betabinomial(one model)','Betabinomial(two models)'), col=c('black','dark green','dark red'), pch=1) # optional legend
par(cex.axis=1.5, cex.lab=2, cex.main=2, mar=c(5,5,5,5))
dev.off()
dev.off()
dev.off()
par(cex.axis=1.5, cex.lab=2, cex.main=2, mar=c(5,5,5,5))
hist(count$mat_allele_count/count$total.reads.count, breaks=seq(0,1,0.05), ylim=c(0,50000), col='grey')
empirical.reads.ratio.hist = hist(count$mat_allele_count/count$total.reads.count, breaks=seq(0,1,0.05), plot = F)
count$expected.reads.count.all <- rbetabinom(rep(1,length(count$total.reads.count)), count$total.reads.count, prob = 0.5,rho = Rho_all)
expected.reads.ratio.hist <- hist(count$expected.reads.count.all/count$total.reads.count, breaks=seq(0,1,0.05), plot=F)
lines(expected.reads.ratio.hist$mids, expected.reads.ratio.hist$counts, type='o', col='dark green')
sum((empirical.reads.ratio.hist$counts - expected.reads.ratio.hist$counts)^2)
count$expected.reads.count.SymAsym <- count$expected.reads.count.all
count$expected.reads.count.SymAsym[count$SymCls =='Asym'] <-  rbetabinom(rep(1,length(count$total.reads.count[count$SymCls =='Asym'])), count$total.reads.count[count$SymCls =='Asym'],prob = 0.5,rho = Rho_Asym)
count$expected.reads.count.SymAsym[count$SymCls =='Sym'] <-  rbetabinom(rep(1,length(count$total.reads.count[count$SymCls =='Sym'])), count$total.reads.count[count$SymCls =='Sym'],prob = 0.5,rho = Rho_Sym)
expected.reads.ratio.hist <- hist(count$expected.reads.count.SymAsym/count$total.reads.count, breaks=seq(0,1,0.05), plot=F)
lines(expected.reads.ratio.hist$mids, expected.reads.ratio.hist$counts, type='o', col='dark red')
sum((empirical.reads.ratio.hist$counts - expected.reads.ratio.hist$counts)^2)
count$expected.reads.count.bin <-  rbetabinom(rep(1,length(count$total.reads.count)), count$total.reads.count, 0.5, rho = 0)
expected.reads.ratio.hist <- hist(count$expected.reads.count.bin/count$total.reads.count, breaks=seq(0,1,0.05), plot=F)
lines(expected.reads.ratio.hist$mids, expected.reads.ratio.hist$counts, type='o', col='black')
legend("topleft", legend = c('Binomial','Betabinomial(one model)','Betabinomial(two models)'), col=c('black','dark green','dark red'), pch=1) # optional legend
legend("topleft", legend = c('Binomial',paste('Betabinomial rho=',Rho_all,sep=''),'Betabinomial(two models)'), col=c('black','dark green','dark red'), pch=1) # optional legend
round(Rho_all)
round(Rho_all,digits = 2)
legend("topleft", legend = c('Binomial',paste('Betabinomial rho=',round(Rho_all,digits = 2),sep=''),'Betabinomial(two models)'), col=c('black','dark green','dark red'), pch=1) # optional legend
legend("topleft", legend = c('Binomial',paste('Betabinomial (rho=',round(Rho_all,digits = 2),')',sep=''),'Betabinomial(two models)'), col=c('black','dark green','dark red'), pch=1) # optional legend
legend("topleft", legend = c('Binomial',paste('Betabinomial (rho=',round(Rho_all,digits = 2),')',sep=''),
paste('Betabinomial (Asym.rho=',round(Rho_Asym,digits = 2),'Sym.rho=',round(Rho_Sym,digits = 2),')',sep='')), col=c('black','dark green','dark red'), pch=1) # optional legend
legend("topleft", legend = c('Binomial',paste('Betabinomial (rho=',round(Rho_all,digits = 2),')',sep=''),
paste('Betabinomial (Asym.rho=',round(Rho_Asym,digits = 2),', Sym.rho=',round(Rho_Sym,digits = 2),')',sep='')), col=c('black','dark green','dark red'), pch=1) # optional legend
pdf('counts_hist.pdf',width=17, height=9)
par(cex.axis=1.5, cex.lab=2, cex.main=2, mar=c(5,5,5,5))
hist(count$mat_allele_count/count$total.reads.count, breaks=seq(0,1,0.05), ylim=c(0,50000), col='grey')
empirical.reads.ratio.hist = hist(count$mat_allele_count/count$total.reads.count, breaks=seq(0,1,0.05), plot = F)
count$expected.reads.count.all <- rbetabinom(rep(1,length(count$total.reads.count)), count$total.reads.count, prob = 0.5,rho = Rho_all)
expected.reads.ratio.hist <- hist(count$expected.reads.count.all/count$total.reads.count, breaks=seq(0,1,0.05), plot=F)
lines(expected.reads.ratio.hist$mids, expected.reads.ratio.hist$counts, type='o', col='dark green')
sum((empirical.reads.ratio.hist$counts - expected.reads.ratio.hist$counts)^2)
count$expected.reads.count.SymAsym <- count$expected.reads.count.all
count$expected.reads.count.SymAsym[count$SymCls =='Asym'] <-  rbetabinom(rep(1,length(count$total.reads.count[count$SymCls =='Asym'])), count$total.reads.count[count$SymCls =='Asym'],prob = 0.5,rho = Rho_Asym)
count$expected.reads.count.SymAsym[count$SymCls =='Sym'] <-  rbetabinom(rep(1,length(count$total.reads.count[count$SymCls =='Sym'])), count$total.reads.count[count$SymCls =='Sym'],prob = 0.5,rho = Rho_Sym)
expected.reads.ratio.hist <- hist(count$expected.reads.count.SymAsym/count$total.reads.count, breaks=seq(0,1,0.05), plot=F)
lines(expected.reads.ratio.hist$mids, expected.reads.ratio.hist$counts, type='o', col='dark red')
sum((empirical.reads.ratio.hist$counts - expected.reads.ratio.hist$counts)^2)
count$expected.reads.count.bin <-  rbetabinom(rep(1,length(count$total.reads.count)), count$total.reads.count, 0.5, rho = 0)
expected.reads.ratio.hist <- hist(count$expected.reads.count.bin/count$total.reads.count, breaks=seq(0,1,0.05), plot=F)
lines(expected.reads.ratio.hist$mids, expected.reads.ratio.hist$counts, type='o', col='black')
legend("topleft", legend = c('Binomial',paste('Betabinomial (rho=',round(Rho_all,digits = 2),')',sep=''),
paste('Betabinomial (Asym.rho=',round(Rho_Asym,digits = 2),', Sym.rho=',round(Rho_Sym,digits = 2),')',sep='')), col=c('black','dark green','dark red'), pch=1) # optional legend
dev.off()
legend("topleft", legend = c('Binomial',paste('Betabinomial (rho=',round(Rho_all,digits = 2),')',sep=''),
paste('Betabinomial (Asym.rho=',round(Rho_Asym,digits = 2),', Sym.rho=',round(Rho_Sym,digits = 2),')',sep='')),
col=c('black','dark green','dark red'), pch=15) # optional legend
legend("topleft", legend = c('Binomial',paste('Betabinomial (rho=',round(Rho_all,digits = 2),')',sep=''),
paste('Betabinomial (Asym.rho=',round(Rho_Asym,digits = 2),', Sym.rho=',round(Rho_Sym,digits = 2),')',sep='')),
col=c('black','dark green','dark red'), pch=1, cex=2, pt.cex=2) # optional legend
pdf('counts_hist.pdf',width=17, height=9)
par(cex.axis=1.5, cex.lab=2, cex.main=2, mar=c(5,5,5,5))
# observed data
hist(count$mat_allele_count/count$total.reads.count, breaks=seq(0,1,0.05), ylim=c(0,50000), col='grey')
empirical.reads.ratio.hist = hist(count$mat_allele_count/count$total.reads.count, breaks=seq(0,1,0.05), plot = F)
# simulated data using Rho_all
count$expected.reads.count.all <- rbetabinom(rep(1,length(count$total.reads.count)), count$total.reads.count, prob = 0.5,rho = Rho_all)
expected.reads.ratio.hist <- hist(count$expected.reads.count.all/count$total.reads.count, breaks=seq(0,1,0.05), plot=F)
lines(expected.reads.ratio.hist$mids, expected.reads.ratio.hist$counts, type='o', col='dark green')
sum((empirical.reads.ratio.hist$counts - expected.reads.ratio.hist$counts)^2)
# simulated data using Rho_Asym and Rho_Sym
count$expected.reads.count.SymAsym <- count$expected.reads.count.all
count$expected.reads.count.SymAsym[count$SymCls =='Asym'] <-  rbetabinom(rep(1,length(count$total.reads.count[count$SymCls =='Asym'])), count$total.reads.count[count$SymCls =='Asym'],prob = 0.5,rho = Rho_Asym)
count$expected.reads.count.SymAsym[count$SymCls =='Sym'] <-  rbetabinom(rep(1,length(count$total.reads.count[count$SymCls =='Sym'])), count$total.reads.count[count$SymCls =='Sym'],prob = 0.5,rho = Rho_Sym)
expected.reads.ratio.hist <- hist(count$expected.reads.count.SymAsym/count$total.reads.count, breaks=seq(0,1,0.05), plot=F)
lines(expected.reads.ratio.hist$mids, expected.reads.ratio.hist$counts, type='o', col='dark red')
sum((empirical.reads.ratio.hist$counts - expected.reads.ratio.hist$counts)^2)
#251,776,786
# simulated data using Binomial
count$expected.reads.count.bin <-  rbetabinom(rep(1,length(count$total.reads.count)), count$total.reads.count, 0.5, rho = 0)
expected.reads.ratio.hist <- hist(count$expected.reads.count.bin/count$total.reads.count, breaks=seq(0,1,0.05), plot=F)
lines(expected.reads.ratio.hist$mids, expected.reads.ratio.hist$counts, type='o', col='black')
#Legend
legend("topleft", legend = c('Binomial',paste('Betabinomial (rho=',round(Rho_all,digits = 2),')',sep=''),
paste('Betabinomial (Asym.rho=',round(Rho_Asym,digits = 2),', Sym.rho=',round(Rho_Sym,digits = 2),')',sep='')),
col=c('black','dark green','dark red'), pch=1, cex=2, pt.cex=2) # optional legend
dev.off()
?cex
??cex
pdf('counts_hist.pdf',width=17, height=9)
par(cex.axis=1.5, cex.lab=2, cex.main=2, mar=c(5,5,5,5))
# observed data
hist(count$mat_allele_count/count$total.reads.count, breaks=seq(0,1,0.05), ylim=c(0,50000), col='grey')
empirical.reads.ratio.hist = hist(count$mat_allele_count/count$total.reads.count, breaks=seq(0,1,0.05), plot = F)
# simulated data using Rho_all
count$expected.reads.count.all <- rbetabinom(rep(1,length(count$total.reads.count)), count$total.reads.count, prob = 0.5,rho = Rho_all)
expected.reads.ratio.hist <- hist(count$expected.reads.count.all/count$total.reads.count, breaks=seq(0,1,0.05), plot=F)
lines(expected.reads.ratio.hist$mids, expected.reads.ratio.hist$counts, type='o', col='dark green')
sum((empirical.reads.ratio.hist$counts - expected.reads.ratio.hist$counts)^2)
# simulated data using Rho_Asym and Rho_Sym
count$expected.reads.count.SymAsym <- count$expected.reads.count.all
count$expected.reads.count.SymAsym[count$SymCls =='Asym'] <-  rbetabinom(rep(1,length(count$total.reads.count[count$SymCls =='Asym'])), count$total.reads.count[count$SymCls =='Asym'],prob = 0.5,rho = Rho_Asym)
count$expected.reads.count.SymAsym[count$SymCls =='Sym'] <-  rbetabinom(rep(1,length(count$total.reads.count[count$SymCls =='Sym'])), count$total.reads.count[count$SymCls =='Sym'],prob = 0.5,rho = Rho_Sym)
expected.reads.ratio.hist <- hist(count$expected.reads.count.SymAsym/count$total.reads.count, breaks=seq(0,1,0.05), plot=F)
lines(expected.reads.ratio.hist$mids, expected.reads.ratio.hist$counts, type='o', col='dark red')
sum((empirical.reads.ratio.hist$counts - expected.reads.ratio.hist$counts)^2)
#251,776,786
# simulated data using Binomial
count$expected.reads.count.bin <-  rbetabinom(rep(1,length(count$total.reads.count)), count$total.reads.count, 0.5, rho = 0)
expected.reads.ratio.hist <- hist(count$expected.reads.count.bin/count$total.reads.count, breaks=seq(0,1,0.05), plot=F)
lines(expected.reads.ratio.hist$mids, expected.reads.ratio.hist$counts, type='o', col='black')
#Legend
legend("topleft", legend = c('Binomial',paste('Betabinomial (rho=',round(Rho_all,digits = 2),')',sep=''),
paste('Betabinomial (Asym.rho=',round(Rho_Asym,digits = 2),', Sym.rho=',round(Rho_Sym,digits = 2),')',sep='')),
col=c('black','dark green','dark red'), pch=1, cex=1.5, pt.cex=2) # optional legend
dev.off()
str(empirical.reads.ratio.hist)
empirical.reads.ratio.hist$counts
max(empirical.reads.ratio.hist$counts)
?round()
log10(max(empirical.reads.ratio.hist$counts))
trunc(log10(max(empirical.reads.ratio.hist$counts)))
max(empirical.reads.ratio.hist$counts) / max(empirical.reads.ratio.hist$counts)
10Etrunc(log10(max(empirical.reads.ratio.hist$counts)))
10^4
10^trunc(log10(max(empirical.reads.ratio.hist$counts)))
max(empirical.reads.ratio.hist$counts)/10^trunc(log10(max(empirical.reads.ratio.hist$counts)))
hist(count$mat_allele_count/count$total.reads.count, breaks=seq(0,1,0.05), ylim=c(0,2*max(empirical.reads.ratio.hist$counts)), col='grey')
hist(count$mat_allele_count/count$total.reads.count, breaks=seq(0,1,0.05), ylim=c(0,2*max(empirical.reads.ratio.hist$counts)), col='red')
hist(count$mat_allele_count[count$SymPval>0.05]/count$total.reads.count[count$SymPval>0.05], breaks=seq(0,1,0.05), col='dark grey', add=T)
hist(count$mat_allele_count/count$total.reads.count, breaks=seq(0,1,0.05), col='red', main="Red is Binomial Pvalue < 0.05")
hist(count$mat_allele_count[count$SymPval>0.05]/count$total.reads.count[count$SymPval>0.05], breaks=seq(0,1,0.05), col='dark grey', add=T)
count$SymPval.beta.SymModel = betabinom.test.rho(count$mat_allele_count, count$total.reads.count, rho = Rho_Sym )
par(cex.axis=1.5, cex.lab=2, cex.main=2, mar=c(5,5,5,5))
hist(count$mat_allele_count/count$total.reads.count, breaks=seq(0,1,0.05), col='red', main="Red is Beta-Binomial Pvalue < 0.05")
hist(count$mat_allele_count[count$SymPval.beta.SymModel>0.05]/count$total.reads.count[count$SymPval.beta.SymModel>0.05], breaks=seq(0,1,0.05), col='dark grey', add=T)
head count$SymPval.beta.SymModel
head(count$SymPval.beta.SymModel)
count$SymPval.beta.SymModel = betabinom.test.rho(count$mat_allele_count, count$total.reads.count, rho = Rho_Sym )
N=500
plot(0:N, dbetabinom.ab(0:N,N,s1_all,s2_all))
plot(0:N, dbetabinom.ab(0:N,N,s1_Asym, s2_Asym))
plot(0:N, dbetabinom.ab(0:N,N,s1_Sym, s2_Sym))
hist(rbetabinom.ab(0:N,N,s1_all,s2_all)/N)
hist(rbetabinom.ab(0:N,N,s1_Asym,s2_Asym)/N)
hist(rbetabinom.ab(0:N,N,s1_Sym,s2_Sym)/N)
count$SymPval.beta.SymModel
count$mat_allele_count
count$SymPval.beta.SymModel = betabinom.test.ab(count$mat_allele_count, count$total.reads.count, s1_Sym, s2_Sym)
rowMins <- function(input_matrix){
rowMin=c()
for (i in 1 :dim(input_matrix)[1]){
rowMin=c(rowMin, min(input_matrix[i,]))
}
return(rowMin)
}
count$SymPval.beta.SymModel = betabinom.test.rho(count$mat_allele_count, count$total.reads.count, rho = Rho_Sym )
?pbetabinom
count$SymPval.beta.SymModel.lower = betabinom.test.rho(rowMins(cbind(count$pat_allele_count,count$mat_allele_count)), count$total.reads.count, rho = Rho_Sym )
count$SymPval.beta.OneModel.lower = betabinom.test.rho(rowMins(cbind(count$pat_allele_count,count$mat_allele_count)), count$total.reads.count, rho = Rho_all )
getwd()
paste(getwd(),"betabinomial",sep='/')
Min_count = args[3]
Min_count
Min_count is None
Min_count == None
Min_count == NA
cat(count_fp, '\n')
Min_count = 5
Max_Pvalus = 0.05
length(count_fp)
nchar(count_fp)
getwd()
summary(count$SymPval)
folder = '/Users/shaopei/Box\ Sync/Danko_lab_work/Script/After_AlleleDB_pipeline/' #args[1]
setwd(folder)
count_fp = 'interestingHets_plus.txt' #args[2]
count <- read.table(count_fp,header=T,sep = "\t")
dim(count)
count <- count[count$SymCls !='Weird', ]
dim(count)
count$total_reads_count <-count$cA + count$cC + count$cG + count$cT
View(count)
Min_count
count <- count[count$total_reads_count >=Min_count, ]
dim(count)
summary(count$SymPval)
Max_Pvalus
Max_Pvalus = 1
count <- count[count$SymPval <= Max_Pvalus, ]
dim(count)
count$mat_allele_count <- get.mat_allele_count(count)
count$pat_allele_count <- get.pat_allele_count(count)
count$total_reads_count.1 <-count$mat_allele_count + count$pat_allele_count
View(count)
count$total_reads_count <-count$mat_allele_count + count$pat_allele_count
count <- read.table(count_fp,header=T,sep = "\t")
dim(count)
count <- count[count$SymCls !='Weird', ]
dim(count)
count$mat_allele_count <- get.mat_allele_count(count)
count$pat_allele_count <- get.pat_allele_count(count)
count$total_reads_count <-count$mat_allele_count + count$pat_allele_count
dim(count)
count <- count[count$total_reads_count >=Min_count, ]
dim(count)
summary(count$SymPval)
count <- count[count$SymPval <= Max_Pvalus, ]
dim(count)
count <- read.table(count_fp,header=T,sep = "\t")
count_fp
dim(count)
count <- count[count$SymCls !='Weird', ]
dim(count)
count$mat_allele_count <- get.mat_allele_count(count)
count$pat_allele_count <- get.pat_allele_count(count)
count$total_reads_count <-count$cA + count$cC + count$cG + count$cT
dim(count)
count <- count[count$total_reads_count >=Min_count, ]
dim(count)
summary(count$SymPval)
count <- count[count$SymPval <= Max_Pvalus, ]
dim(count)
print('R --vanilla --slave --args $(pwd) \'counts/interestingHets\' < script.R ')
print('R --vanilla --slave --args $(pwd) counts/interestingHets < script.R ')
paste("^.*_",argv[2],"\\.txt$",sep = ""
)
paste("^.*_","x","\\.txt$",sep = "")
glob2rx("BlackList.Filtered_counts.bed")
glob2rx("*BlackList.Filtered_counts.bed")
glob2rx("*.SymPval")
?merge
?merge()
?write.table()
